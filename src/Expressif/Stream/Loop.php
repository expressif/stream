<?php/** * Expressif- stream implementation * @author Ioan CHIRIAC * @license MIT */namespace Expressif\Stream {  class Loop {    /**     * Gets the loop status     */    public static $run = false;    /**     * List of attached items     */    public static $items;    /**     * The event base     */    public static $base;    /**     * Creates a stream reader     * @return Reader     */    public static function read($stream) {      return new Reader($stream);    }    /**     * Creates a bufferized stream     * @return Buffer     */    public static function buffer($stream) {      if (is_string($stream)) {        $handle = stream_socket_client($stream, $errno, $errstr);        if (!$stream) {          throw new \Exception(            "Could not connect to $stream ($errno:$errstr)"          );        }        $stream = $handle;      }      return new Buffer($stream);    }    /**     * Attach the specified event instance     */    public static function attachEvent($event, $timeout = -1) {      if (event_base_set($event, self::$base) === false) {        throw new \Exception('Unable to attach event to libevent');      }      event_add($event, $timeout);    }    /**     * Attach the specified buffer     */    public static function attachBuffer(Buffer $buffer) {      if (event_buffer_base_set($buffer->event, self::$base) === false) {        throw new \Exception('Unable to attach buffer to libevent');      }    }    /**     * Calls the specified callback at each interval (ms)     * @return Timer     */    public static function setInterval($fn, $interval) {      $e = new Timer($fn, $interval);      self::$items->attach($e);      return $e;    }    /**     * Clear the specified interval     */    public static function clearInterval(Timer $timer) {      self::$items->detach($timer);      $timer->__destruct();    }    /**     * Attach the specified callback on the specified descriptor     * @return Event     */    public static function stop() {      self::$run = false;      event_base_loopexit(self::$base, 1000);    }    /**     * Check if the loop is started     */    public static function isStarted() {      return self::$run;    }    /**     * Starts the event loop     */    public static function start() {      self::$run = true;      while(self::$run) {        if (event_base_loop(self::$base, EVLOOP_ONCE) === 1) {          break; // loop is empty        }      }      self::$run = false;    }  }  // MAGIC ! automatically run after the script was initialized  define('IS_WINDOWS', strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');  Loop::$base = event_base_new();  Loop::$items = new \SplObjectStorage();  register_shutdown_function(function() {    if (!Loop::isStarted()) {      Loop::start();    }  });}