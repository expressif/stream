<?php/** * Expressif- stream implementation * @author Ioan CHIRIAC * @license MIT */namespace Expressif\Stream {  use Event;  use EventBase;  use EventConfig;  class Loop {    /**     * The main loop instance     */    public static $instance;    /**     * Gets the loop status     */    private $run = false;    /**     * @var EventBase     */    private $base;    public function __construct() {      $config = new EventConfig();      $config->avoidMethod('select');      $config->avoidMethod('poll');      $config->requireFeatures(        EventConfig::FEATURE_ET        | EventConfig::FEATURE_O1      );      $this->base = new EventBase();    }    public function setInterval($fn, $interval) {      $e = Event::timer($this->base, $fn, $interval / 1000);      $e->addTimer($interval / 1000);      return $e;    }    public function clearInterval(Event $timer) {      return $this->clear($timer);    }    public function clear(Event $evt) {      $evt->del();      $evt->free();      $evt = null;      return $this;    }    /**     * Attach the specified callback on the specified descriptor     * @return Event     */    public function onRead($fd, $fn) {      return new Event($this->base, $fd, Event::Read, $fn);    }    /**     * Attach the specified callback on the specified descriptor     * @return Event     */    public function onWrite($fd, $fn) {      return new Event($this->base, $fd, Event::Write, $fn);    }    /**     * Attach the specified callback on the specified descriptor     * @return Event     */    public function stop() {      $this->base->exit();      $this->run = false;      return $this;    }    /**     * Check if the loop is started     */    public function isStarted() {      return $this->run;    }    /**     * Starts the event loop     */    public function start() {      $this->run = true;      $this->base->loop(        EventBase::NOLOCK        | EventBase::EPOLL_USE_CHANGELIST        | EventBase::STARTUP_IOCP      );      $this->run = false;    }  }  // MAGIC ! automatically run after the script was initialized  define('IS_WINDOWS', strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');  register_shutdown_function(function() {    if (Loop::$instance && !Loop::$instance->isStarted()) {      Loop::$instance->start();    }  });}